#+TITLE: 避障杂荟
#+AUTHOR: Green 
#+DATE: \today

#+STARTUP: latexpreview,inlineimages
#+LaTeX_HEADER: \DeclareMathOperator*{\argmin}{arg\,min}
#+LaTeX_HEADER: \DeclareMathOperator*{\argmax}{arg\,max}
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil tasks:nil pri:nil title:t
#+LATEX_CLASS: xelatex-org-article 


* 目前的避障模块
** 输入信息
输入信息的类型以及其精度范围，
该信息对避障效果的影响。

*** 任务类型标志
*** 导航信息
*** 船体信息
*** 障碍物信息
激光雷达的探测距离

** 输出信息
*** 无人艇速度、方向

** 所涉及的中间过程
*** 解决传感器所提供的信息不精确
**** 障碍物检测的不精确
动态膨胀模块:
由于传感器所检测到的障碍物的并不完全。

*** 判断何时进行避障模块
计算避障距离模块

*** 碰撞检测模块
判断是否会发生碰撞

*** 避障机制与策略
计算避障方向

** 目前避障所遇到的困难

* 避障模块的职责范围


* 避障的重点

* 避障的难点

* 未来的规划
国际海事规则
传感器融合
全局路径和局部路径的结合

* 待分类
第二个层面是基于雷达、AIS等传感器、低频率、中等范围内的避障。
这种避障方式一般覆盖范围在公里级，相对无人艇来说已经也属于比较大的范围了，
此时无论是出现的大型船只，还是海图上没有的未知岛屿都能够被探测，
无人艇只需要稍微调整航向，就能够避开障碍物，
避免了障碍物离得很近时才发现导致紧急打舵避障的局面。
因此，这种避障方式采用中等运行频率，
比如说在无人艇方圆五公里范围内出现障碍物了，
且是电子海图上没有的，
而按照第一个层面规划出的路径行驶的话可能存在碰撞的危险，
则运行该层面的避障方式，指示无人艇修改第一个层面的规划路径进行避让。
它的优先级中等

* 综述
** Autonomous Ship Collision Avoidance Navigation Concepts, Technologies and Techniques
*** 阅读时间
2017/03/01

*** 基本信息
https://www.cambridge.org/core/journals/journal-of-navigation/article/div-classtitleautonomous-ship-collision-avoidance-navigation-concepts-technologiepful if we could somehow distribute source code pro ws-and-techniquesdiv/3F3ED13DEFF7B84B5B0A758BEBF47ADD

被引用次数： 114

*** 简要概述及评论
该篇论文是一篇处于避障研latex error can be used only in preamble include究初期阶段的综述性文章，
本文从船体避障的影响因素，基于数学模型的算法和基于人工智能的算法三个方面进行了介绍。
整体概念比较陈旧，浅显，没有太大的阅读价值，不过其介绍关于的避障的影响因素可以多看看,
会使未来避障算法的设计的考虑更加全面，并可能会带来启发。

*** 影响船体避障的一些因素
**** 船的类型
因为不同船的速度和敏捷差别很大，对于避障来说，
不同的船可以有不同的避障动作。

**** 交通类型
交通类型可以简单的划分为两大类：
+ 狭小环境的交通环境：local traffic control station, piloting crew of the ship。
+ 开阔水域的交通环境：communication of the captain and the encountered ship or ships,
as well as COLREGs。

需要注意的是对于船体的智能算法来说并不使用任何的通信手段。
因此，这些算法计算出了避障的安全和最优路径。

**** 天气
**** 导航技术

需要注意的是：
+ 避障和轨迹跟踪之间存在着权衡取舍。
+ 即使可以通过海事规则来推断避障的决策，
对这些准则的分析和性能的考虑，仍然是非常主观的。

*** 基于数学模型的算法
这些模型考虑了一系列影响水面避障的因素，
比如船体动力学，船体的运动矢量，船体的操作和路径。

该类模型在外因输入并不大时，是有效的。

这些模型都基于相同的假设：
+ 考虑的是开阔海域的避障
+ 目标船只的速度不变
+ 相遇船只彼此没有通信

基于数学模型的算法可以大致分为三大类：
+ 模拟船体动力学
+ 优化船体轨迹的多艇避障算法
+ 实时避障算法

*** 软件计算技术
**** 混合系统
有前景，但是需要同时结合不同的人工智能技术
fuzzy approach
neural networks
artificial potential field

**** 遗传算法
其有效性取决于优化方法。

** A review on improving the autonomy of unmanned surface vehicles through intelligent collision avoidance manoeuvres

*** 阅读时间
2017/03/04

*** 基本信息
http://www.sciencedirect.com/science/article/pii/S1367578812000430

被引用次数： 61

*** 简要概述及评论
这篇文章主要围绕的是无人艇的智能避障，但涉及面较广，
包括了无人艇系统的划分、Guidance（不断地计算下一步所需要的位置，速度和加速度）、Navigation（确定当前的位置和已经经过的轨迹）、
控制（确定控制所需要的作用力）和路径规划（设计完成任务所需要的轨迹）。
介绍了各个领域的基本概念和最新进展，并将重点集中在和海事规则结合上。

提出了很多无人艇的关键技术和研究难点，是一篇不错的综述文献。

*** 引论
当前为了增加USV的智能，遇到的挑战包括自主避障以及和海事规则的结合。

严峻的海洋环境和开放的Navigation（导航）空间位姿会给欠驱动艇的控制带来很大的挑战。

ODA:Obstacle Detection and Avoidance

未来无人艇的发展主要取决于决定它们能力的基础技术的发展。

本文主要介绍了关于无人艇的一系列基础话题的新进展，
并展示了这些新进展和鲁棒性强的路径规划的综合，
如何为服从海事规则的无人艇提供一个全面的解决方案。

*** 制导和路径规划
基础的制导规则通常假设无障碍的路径。
而路径规划则通常假设避障是该过程的一个部分。

**** 路径规划的种类
+ Setpoint regulation:假设朝向角是固定的，没有时间的考量。
+ Path following: 跟随一个理想的，和时间无关的路径。
+ Trajectory tracking:只有运动目标当前的信息是已知的，
并且要满足预先定义的时间及空间约束。
+ Manoeuvring:引导船体运动沿着一个可行的路径进行跟随，
通常和空间约束相比，时间约束所赋予的重要性更低。

**** 障碍检测和避障动作架构
当环境为未知或者部分已知且障碍物为动态的情况下，这个问题可以转化为NP Hard问题。

现代NGC架构采用的是由反应型（reflexive）和审慎型（deliberative）的避障模块所组成的混合架构。
在任务开始前离线进行大部分的路径规划任务，
在环境发生变化时再进行一系列的重新规划。

**** 图的表示方法
数据压缩的混合图的表示方法在路径规划中也是有应用的。

在存在噪声和较差的传感器精度的动态环境中一个适用的方法是Fuzzy Modelling。

***** 定性的图
拓扑图，表示图形中的特征关系。

***** 定量的图
可以使用基于位点的路径规划，并且可以通过运行优化算法来找到最优路径。
较常用的几种度量图的技术如下：

****** Meadow Maps
通过连接相较特征来划分自由空间为凸多边形
连接中点来生成路径。

****** Voronoi Diagrams
到各个边的距离相等

****** Regular Occupancy Grid

****** Quadtree Mapping
对于存在障碍物的栅格不断进行四等分。
不同的精度划分可以节约内存存储。

**** 制导和路径规划算法
***** LOS
***** Artificial potential field 人工势场
***** EA(遗传算法)
***** 启发式搜索算法
路径规划算法被要求生成从起始点到终止点的一系列的动作或路径。

D*算法可以仅仅计算被影响的数据，减少了时间消耗和计算的强度。

Anytime算法通过搜索近似最优的解来解决时间和质量的权衡。

一个最新提出的Homotopic A*(HA*)算法搜索homotype class,
创建了一个有着很高可能性包含最优解的更小的搜索空间。

遗传算法有被和启发式搜索方法相结合来解决动力学和时间约束的情况。

***** 路径的平滑和船体动力学
路径规划的生成路径通常使用直线连接位点来表示，
其可能导致崎岖，不连续，有高转弯率的路径来损害驱动器。

对于平滑来说，优化子路径而不是整个投影路径的方法更具有可操作性。

平滑所存在的一个问题是当位点发生改变时，整个路径必须被重新生成。

平滑所对船体动力学的影响可以分为几个等级。

常用的手段有Dubins,Clothoids和Pythagorean Hodograph方法。

*** 国际海事避碰规则
**** 国际海事规则的三个组成部分
+ 通用性：概括了规则的实用性和责任。
+ 打舵和航行规则：分为可视环境下船体的控制和多船相遇情况下的船体控制这两个方面。
+ 灯光和船体形状：灯光和信号的使用。

**** 挑战性
在无人艇应用海事规则的过程中，
最重要的挑战在于两船相遇情况下的无人艇的控制。

***** Rule13 - Overtaking
***** Rule14 - Head-on Situation
两船均打右弦（starboard）

***** Rule15 - Crossing Situation
相遇船只在其右弦侧的船只主动避让，并且尽量避开船头方向。
而另一艘船只则保持自己的航行和速度。

***** Rule16 - Action by give-way vessel
尽量远地避开相遇船只，并且提前采取措施。

***** Rule17 - Action by stand-on vessel
如果需要避让的船只没有采取适当的符合海事规则的措施，
那本应保持的船只也可采取避让措施。

***** 其他
Rule18规定了哪种类型的船只必须优先采取避让措施。

除了Rule14和Rule15中的保持场景之外，
无人艇总是应该给其他的船只让道。

PartC中的声音和灯光协议可以和避障路径相结合。

结合符合海事规则的操作需要一系列的预先规划作为审慎的避障的一部分。
而且无人艇的反应受相遇船只的状态和动作的影响很大，
所以动作决策需要在线进行。

碰撞风险评估对于无人艇来说是非常关键的，
在其安全性的等级达到最高时，其可以采取任何措施来进行避障，
即使违反了国际海事规则。

*** 多艇协同和海事规则的结合
从路径规划的角度来看，目前还没有多艇协同和海事规则结合的问题的解法存在。

中心系统 vs 分布式控制

*** 讨论
和多艘艇的相遇问题会带来很大的挑战。

一种合适的符合海事规则的动作可以通过Interval Programming的合适的权重设置来产生。
但是该系统的研究尚未被认为是完全符合海事规则的。
（Interval programming is the modelling aspects of optimization problems
in which model parameters are defined in the form of bounded intervals.）

其他的一些结合了基本的海事规则的避障方法的研究包括
+ 改进的A*
+ ACO
+ 考虑了一系列的安全和性能的评价标准的多阶段的路径选择。

由于Reactive(反应式)式的避障策略存在会由于冲突的信号和模式转换过程
而产生无法预测的行为，并且可能会陷入死点。
因此如果没有很大的改进，这种方法很难在实际的避障中单独使用。

*** 结论
目前USV ODA系统的一个主要的不足在于无法在复杂的相遇场景中选取一个合适的运动轨迹。
还有一个挑战在于如何定量描述定性化的海事避碰规则。

避障系统为了确定在可视范围内的所有目标的状态需要高效性能的传感和检测系统。
并且要求控制器在有海浪干扰的情况下能够有效地跟踪路径。

为了保证安全性的需要，有能够处理紧急场景和未被发现情况的应变式避障模块也是必要的。

** Review of Collision Avoidance and Path Planning Methods for Ships in Close Range Encounters
*** 阅读时间
2017/03/09

*** 基本信息
https://www.cambridge.org/core/journals/journal-of-navigation/article/div-classtitlereview-of-collision-avoidance-and-path-planning-methods-for-ships-in-close-range-encountersdiv/8BA2E9CA628423724B1881B32417F042
被引用次数：57

*** 简要概述及评论
本文主要从碰撞风险评估，碰撞算法的研究和路径规划三个角度介绍了几个方向的研究情况和
较为常见及较为实用的基本算法。
但是这篇文章较为陈旧，如果需要获取较为实用的算法，
可能还需要补充阅读目前无人艇研究中最新的研究进展。

这篇文章的一个亮点是作者在讨论部分所提出的目前研究的不足之处，
其对于目前的研究也是很有指导意义的。

*** 介绍
主要的研究关注于避障方法的研究，目前一些研究关注于路径规划。

目前主要的挑战在于如何将避障的方法和海事规则以及海员的实践相结合。
除此以为，船体的动力学也是高度复杂的，并且取决于船形，速度和环境条件等因素的影响。

约定的术语：
+ 最优：仅当其有特定的要求：计算最短路径，最少的操作等。
+ 考虑了环境因素：在考虑了风向和涌流方向后，
检查了导航路径的船头朝向，因此船头朝向并不和风向，海浪方向相抵抗。
+ 半动态(semi-dynamic)的TS：船头朝向不变
+ 动态的TS：船头朝向改变

避障和路径规划的区分：
生成的导航路径有无考虑最优性质。

*** 碰撞风险评估
碰撞风险评估主要分为求船之间最短即时距离的最近点的方法(CPA)和
显示碰撞危险程度的安全域的方法。

安全域的形状主要是和船体形状较为接近的椭圆的形状。
有些学者通过修改安全域，使得避障动作符合海事规则。

安全域的半径取决于很多独立的变量，
比如区域类型，交通情况，船的长度，最大的速度限制。

为了在更现实的条件下使用，安全域的大小可能需要显著地放大。

Colley提出了另一种船的领域的模型-range-to-domain over range-rate（RDRR）模型。
该方法的基本思路是通过将TS到OS的域的距离和他们相对速度的变化率的比率和一个预先给定的阈值进行比较，
来确定进行避障的合适的位置和时间。

*** 避障算法的研究
早期的避障算法使用的是基于包含了两艘相邻船只的相对速度和航向的数学模型的算法。
其它的一些研究也都是关于船只的导航的概念性评估或者是海水交通的数据研究。

Cannell(1981)描述了一种通过使用一层的合作博弈来对两船的避障问题进行研究的尝试，
并且以最大的安全性作为目标。

Degre&Lefevre(1981)提出了一种基于room-to-manoeuvre原则的避障系统，
room-to-manoeuvre是基于几何的一种模型，其依据速度向量和最近通过距离生成危险区域。

Dove(1986)依据Colley的船域模型提出了一个包含了自动避障的自动导航系统。
其中主要的算法采用的是RDRR模型，其计算出了船在必须让路的情况下所需要改变航向的时间。
船的避障动作在达到船域的边缘时启动，并且具体动作取决于相遇的类型。
多个船只的相遇被划分为一系列的两船相遇问题，其处理顺序取决于每个障碍物的危险性等级（TCPA）。

James(1986)使用了模糊集合理论来进行避障决策，具体的避障动作基于距离和通行边来分类。
已经进行了的工作解决了无碰撞和在开放海域下路径符合海事规则的要求，
不过对于两个相碰撞的船只没有考虑最优性，也没有进行环境条件下的相容性检测。

Pedersen(2002)通过生成CDL(碰撞危险线)和CDS（碰撞危险区域）的方式来表示不同等级的碰撞危险程度。
其是根据OS和TS的速度矢量来构造的。

Wilson(2003)借鉴一种导弹导航系统中的比例导航方法来计算无人艇的避障行为。
一旦碰撞条件满足，该系统就会给OS发送一个加速指令来倾斜相对速度和LOS。
但该方法本质上是过度理想化的，
其忽视了太多约束并且有很多不合实际的假设。

*** 路径规划
路径可以划分为确定式的和探索式的两种方法，
确定式的方法遵循一系列严格定义的步骤来确定答案；
而探索式的方法则是仅仅是在搜索空间的一个子集中进行搜索，
并寻找一个可以接受的方案而不是满足设计条件的最优方案。

**** 确定式的方法
Churkin&Zhukov(1998)报告了一个同时使用连续和离散方法
来解决避障的数学模型的方法。
连续的方法是基于linear programming的，
而离散的方法是基于离散化路径并且评估路径的最优特性的方法。

Miele(1999)将避障操作的问题转换为Chebyshev的最优控制问题，
并且通过使用连续的梯度恢复方法进行求解。
不过该种尝试还是海洋导航的一种过度简化的方法。

Hong(1999)提出了一种基于解析集合和凸集的避障算法。
这种方法和Voronoi图方法很像。

Hwang(2001)使用了模糊集合的理论来评估碰撞的风险，并确定避碰的动作。
作者还使用了专家系统来构造符合海事规则的状态空间。
由于该方法对每个TS单独考虑，求解路径，因此产生的路径不为最优路径。
其还有未考虑环境条件的不足，并且假设了OS速度为恒速。

Chang(2003)年提出了一个计算无碰撞路径的方法，其基本思想参考的Lee的maze-routing算法。
离散的圆形船域被用来构造障碍物空间，其中TS和OS的船域根据他们速度向量的大小向前扩张。

Lee&Kim(2004)提出了一种基于使用了海事规则的知识型的系统来进行无人艇的自动避障。
和其他知识型系统类似，这种方法一次只评价一个TS，因此最终路径不是最优的。

Benjamin&Curcio(2004)提出了一种能够生成无碰撞且符合海事规则的路径的interval programming的方法。
这种方法需要一个综合的数据库来更好地处理各种场景。
而且其计算的路径不是最优路径，且没有考虑环境因素。

Liu&Shi(2005)提出了一种使用了模糊集合和神经网络的避障方法。
最终输出的避障路径仅仅考虑了最危险的TS。

Szlapcynski(2006)提出了一种对Chang(2003)的maze-routing方法的改进，
其额外考虑了转弯的惩罚，特定时间的禁止区域和速度减少能力。
但是这种方法仍然没有生成的不是最优路径，且没有考虑环境因素，
而且只能处理OS的减速。

**** 探索式的方法
+ 遗传算法
+ 基因算法
+ 人工神经网络

*** 对过去工作的讨论
**** 相关工作的讨论
路径规划的一个主要的权衡在于计算的效率和
路径的完整性。

通常，大多数已经发表的方法采取了一个在OS或者TS上的安全空间域作为一个碰撞风险评估的方法。
其中安全空间域的构造可以基于公式或者数据库。
空间域的具体的几何空间构造取决于实际相遇类型，
不过大多数构造有一个以船为中心的类椭圆形。

目前研究的三个主要缺陷：
+ 没有考虑环境的因素和任务相关的因素。
+ 高度简化的无人艇模型通常只考虑了理想的动力学模型（匀速）。
+ 动态障碍物也在一定程度上是过度简化的。

总的来说，大多数研究都是存在一定的局限，
要不就是不合理的假设（open sea，仅仅两船相遇），
要不就是无视环境条件，或者不符合海事规则。

**** 路径规划的必要性
导航需要路径规划的协助才能找到一个最优的导航路径。

*** 结论
当前路径规划算法的缺陷是没有考虑环境的情况。

** Path planning: A 2013 survey
*** 阅读时间
2017/04/02

*** 基本信息
http://ieeexplore.ieee.org/abstract/document/6761521/
被引用次数：14

*** 简要概述及评论
这篇文献是从环境建模到具体的路径规划技术都较好总结的一篇综述。

接下来可以重点关注下结合了dynamic和any-angle方法的field D*和Incremental phi*。

*** 介绍
路径规划是系统自动化过程的基础任务，它旨在使得目标能够在避开障碍物的和满足相应的各种约束的同时在环境中移动。

事实上，实时生成一个从给定起点到终点的高效路径仍是一个巨大的挑战。

*** 路径规划层级的划分
路径规划可以划分成如下四个层级：
**** Level 1
+ Holonomic Problems：所有自由度都是可控的平台。
+ Nonholommic Problems：该术语来自机械领域，并且指代不能被积分以去除时间微分和状态变量的微分约束。
+ Kinodynamic Problems：需要满足运动学和动力学约束。
**** Level 2
+ Environment Modeling + Search Optimal/Feasible Path:对于A*类的算法，每次都必须先对环境建模
+ Search Optimal/Feasible Path：而RRT和人工势场法对于环境建模却不是必须的。
**** Level 3
+ on-line
+ off-line
**** Level 4
+ Deterministic:在相同的初始条件下，每次执行能获得相同的结果。
+ Probabilistic
 
*** 环境建模
**** 网格分解方法
***** Regular grids
优点：
+ 易于实现
+ 易于更新状态
 
缺点：
+ 障碍物模型不精确
+ 提高精度会使得存储负荷变大
 
***** Irregular grids
有名的栅格划分技术为quadtree，可参考H. Samet的博士论文。

优点：
+ 减少了内存消耗
+ 加快了图的探索
 
缺点：
+ 在某些情况下路径的质量会受到影响
+ 在障碍物密集的情况下，该种方法没有优势
***** Navigation mesh
Navigation mesh代表的是地图中可通行的区域，其连接的边较少，和可视图法比其复杂度小很多。
**** 根据环境中分布的点预先计算的路径
***** Visibility graph
通过连接所有障碍物的节点和起始以及终止节点来表示环境的拓扑结构。

该种方法是路径规划中非常流行的一种环境建模方法，但是它仅能实现2D的环境建模，
并且只能用在离线的情况中。

***** Voronoi diagram
Voronoi图的方法有时被在优化路径不是必须的情况下来减少碰撞的几率。

*** 搜索最优/可行的路径
**** A*以及其变种
在某些环境中-比如航天工业-为了确保某些算法的使用，确定性和完全性是不可或缺的两个重要性质。

***** Dynamic variants:
+ D*(1994):难于理解和实现，并且对内存消耗大。
+ The Focussed D*(1995):和D*相比减少了计算的消耗。
+ LPA*(2002):总是从初始点到初始目标的规划，当起始点改变时规划不可用。
+ D* Lite(2002):和D*相比更加简单，并且效率也不差。

***** Any-angle movement:
+ Field D*(2007)
+ Theta*(2007):缺乏快速重规划的能力。
+ Incremental Phi*(2009):结合了Theta*和D* Lite的优势。

***** Moving Target Points:
对于很多机器人的应用来说，移动目标的搜索是非常关键的。

对于该种问题，其搜索的起始点和终止点往往都是变化的，所以需要一种新的针对性的方法。

***** Anytime path planning:
对于一些情况来说，进行决策的时间是非常有限的。

为了解决该类问题，一种子问题的解的路径规划方法得以应用，或者也被称为分层的路径规划方法。
+ Hierarchical Path-Finding A*(HPA* 2004):通过分解通用的问题为一系列层次化的子问题来有效地减少了基于栅格地图的路径规划方法的复杂性。
+ Anytime D*(2005):结合了anytime和incremental方法的优势。
+ Partial Refinement A*(PRA* 2005)
+ Hierarchical Annoted A*(HAA* 2008):是层次化的路径规划方法的最先进的一种方法，能够有效解决各式多地形的情况。

**** RRTs及其变种
优势：
+ 不需要环境建模
+ 计算效率高

劣势：
+ 不能停止运行来报告无可行解的存在
+ 找到的是可行解而不是最优解

主要的变种：
+ Bi-directional RRT
+ RRT*:一种增长式的算法，其找到初始路径作为基础RRTs，然后使用三角不等式对其进行优化。
+ RRT* Smart grid:是RRT*的一个变种，其旨在加速收敛的速度来获得一个最优或者接近最优的解。

**** 人工势场法
1989年Barraquand和Latombe提出了四种技术来避免局部最小的问题：
+ best-first motion
+ random motion
+ valley-guided motion
+ constrained motion

人工势场方法目前仍是研究者的兴趣之一，并且被认为是最好的在线路径规划算法之一。

* 宏观
** A three-layered architecture for real time path planning and obstacle avoidance for surveillance USVs operating in harbour fields
*** 阅读时间
2017/03/07

*** 基本信息
http://ieeexplore.ieee.org/document/5278104/
被引用次数：44

*** 简要概述及评论
作者对于避障问题提出了一种三层的结构，
分为对静态障碍物的全局路径规划，对移动障碍物的局部路径规划，
以及对局部的危险情况所采用的反应式避障（Reactive obstacle avoidance）。
该种结构主要适于和基于搜索的路径规划方法相结合（？）。

本文主要介绍了前两个层次的算法，
不过其采用的算法都是比较简单的，而且做了过多的假设，
其参考价值不大，不过其背景介绍的部分写的较详细可参考。

*** 主要思想
本文提出了一个可以解决实时避障问题的方法。
其中无人艇在保证安全的前提下快速到达目标。

本文重点介绍了如下的三层架构：
+ 第一层考虑了已知的静态障碍物。
+ 第二层根据移动障碍物的动力学来调整路径避开障碍物（躲避路径为最优）。
+ 第三层考虑了在前两层不能很好地避开障碍物（数据不充分）的情况下，
如何自反应地避开障碍物的问题。

其中前两层的目标是使得最后一层尽可能少地运行。

*** 有意思的细节
碰撞检测算法：
增加了一个时间轴作为z轴。
为了解决这个问题，可以采用了计算机图形学中的光线追踪算法。

** Autonomous navigation and obstacle avoidance for unmanned surface vehicles
*** 阅读时间
2017/03/09

*** 基本信息
http://spie.org/Publications/Proceedings/Paper/10.1117/12.663798
被引用次数：111

*** 简要概述及评论
该篇文章主要介绍了圣地亚哥研究中心所研制的USV的避障技术，
重点介绍了其所使用的避障架构（Deliberative和Reactive）及这两个避障模块所使用到的传感器的信息，
作者还具体介绍了这两个避障架构所使用的算法，以及传感器使用过程中遇到的问题和解决方法。

本文可以看为一个实际系统避障系统搭建的简要手册，
不论是其架构的合理性还是实际会遇到的问题，
及其解决方案都是很值得一看的。

*** 自动化避障
**** 避障模块架构
避障被分为近距离的反应式避障模块和远距离的审慎型避障模块，
这两个模块同时操作并且互相结合。

审慎的避障模块的作用是不断地根据远距离传感器探测到的障碍物，
来修改自己的位点路径。
而反应式的避障模块的职责是避开近距离的障碍物，
其在任何模式下都应当运行。

反应式避障模块处于控制驱动器运行的控制模块之上，
其对通信模块来的操作指令或导航模块来的运行指令进行操作，
并将结果传递给船体控制模块。

**** 审慎的避障模块
审慎避障模块的任务是在远距离的范围内规划一条尽可能沿着原先轨迹，
并同时避开静态和动态障碍物的路径。

***** 静态障碍物
除了海图中的静态障碍物的数据，
用户也可以通过自行指定不可通行区域来设置障碍物。

对于静态障碍物的避障一般采用搜索式算法（A*），
在规划的过程中可以通过设定代价函数来达到预想的目标
（障碍物边缘的安全距离，方向，航道，软障碍物，通过路径的时间）。

***** 动态障碍物
在有移动障碍物的情况下，以有限的速度进行航行的问题属于NP-hard问题。
常见的尝试有：
+ 增加一个时间的维度，但这种方法时间消耗太大。
+ 使用一个quadtree-type的结构表示不同时间下的障碍物，但是这种方法不适合处理过多障碍物。
+ 投影到二维平面的方法，这种方法计算量小，但是不能保证结果最优也无法确保路径可接受。

为了使得能在指定的时间内完成路径规划任务，
路径规划器通常采用的是第三种方案，
这也要求了快速的反应式避障系统的存在。

审慎的避障的一个功能是减少发生碰撞的可能性，
并且减轻了反应式避障系统的任务。

****** 速度障碍物法
速度障碍物法通过无人艇的相对于障碍物的速度和路径来将移动障碍物转换为静止的障碍物，
最终确定了安全的速度范围。

这种方法被用作避开动态障碍物的第一次尝试，
但是由于在一些情况下，改变障碍物并不能避开障碍物，
路径规划器通过使用创建投影障碍物区域并使用A*算法确定安全路径来修正路径。

****** 投影障碍物区域
通过将障碍物未来可能占据的区域进行投影，来创建一个POA区域。
移动障碍物在整个规划过程中可能会占据大量的位置而影响路径的生成。
因此一个合理的方案是使用寻找到最大危险的一个位置（CPA）。
（避障路径是否会使得其他位置比当前最危险位置更有威胁？）

POA可以包含一些不确定的值（通过改变POA的形状和大小）来修改相关区域，
以模拟可能发生加速，减速或者改变方向的移动障碍物。

****** 海事规则
可以通过修改POA的不确定因子来达到符合海事规则的目的。

****** 多次迭代
由于移动障碍物的POA的计算取决于无人艇的当前路径和通过该路径的时间。
而一旦路径发生了改变，就需要更新POA。

通常程序最多需要2-3迭代来获得最终的路径。

**** 反应式避障模块

***** 原因
+ 由于GPS故障或者INU单元的偏移误差，无人艇可能会偏离规划的路径。
+ 远距离的传感器可能无法检测到小的个人船只这种小型障碍物。
+ 只有在无人艇处于位点导航模式下，审慎的避障模块才有用。

***** 算法
在作者的实现中，所有的近距离传感器的数据都融合到了一个一致的局部世界模型中，
并且各个独立的行为在该模型中对特定的导航结果进行投票，
这些独立的投票结果最后使用权重因子进行综合。

*** 传感器
海洋环境对传感器的使用带来了波浪，水花，chaotic obstacle setting等挑战。
但也同时拥有良好记录的海图数据，没有洞穴，峭壁这样的negative obstacles，
几乎平躺的表面，没有植被。

**** 审慎避障系统的传感器
这一部分的传感器需要提供远距离的障碍物信息（>200~300 yards），
并且为移动障碍物提供状态信息。

+ 电子海图
+ 雷达
+ AIS(to add)

**** 反应式避障模块的传感器
这一部分的传感器需要比之前高的多的频率提供近距离的更高精度的障碍物信息。

+ 双目相机
+ 单目相机
+ 电子海图
+ 雷达图像
+ 毫米波 MMW(to add)
+ 扫描激光雷达(to add)

* 避障算法

** Safe Maritime Autonomous Navigation With COLREGS, Using Velocity Obstacles
*** 阅读时间
2017/03/14

*** 基本信息
http://ieeexplore.ieee.org/document/6519944/?reload=true&arnumber=6519944
被引用次数：49

*** 简要概述及评论
作者提出了一种在动态，拥挤的环境中进行符合海事规则的避障的算法。
该算法是通过在VO算法中划分区域来将下面海事规则结合到避障算法中。
本文实现了下面三种主要的海事规则：crossing, overtaking, and head-on situations。

在实际轨迹规划过程中，局部的路径规划器接受高层的路径规划器发出的位点目标指令，
接着使用该算法生成一条无碰撞并且符合海事规则的路径。

该文章中并未提及如果其他船只并不遵守海事规则时，无人艇如何避障。
而且该算法的运算速度多块，是否能满足反应式快速避障的需要？

总的来说这篇文章的算法还是值得深入研究的，
可以对其进行仿真甚至实际使用。

*** 介绍
VO算法是解决移动障碍物避障的一种方法。
其在速度空间中生成类似圆锥的障碍物，并且保证了只要机器人的速度矢量在VO之外，
未来就不会发出碰撞。

VO算法做出了一个一阶的预测（线性），并且其障碍碰撞检测在速度空间中完成。
因此VO方法计算速度快，并且很容易拓展到短时间内完成操作的应用上。
并且其很容易适应到基于行为的控制架构上。

因为VO和海事规则都是以艇体本身为参考系，
两种方法的结合会变的很容易。

即使在简单的常见中，海事规则的应用也并不简单，
因为这些规则的设计针对的是船员，并且具体的操作带有一定的主观性。

当然，当其他船只并不遵守海事规则时，无人艇必须切换回避障算法来避免碰撞。

*** 符合海事规则的规划器
**** 问题描述
提供了：
+ 一个相邻的位点
+ 一个参考速度
+ 一系列的静止和移动障碍物的表示

目标：寻找一个最佳的符合海事规则并且还能避开障碍物的速度

**** VO方法
***** 数学背景
以 $\vec{p}$ 起点沿着 $\vec{v}$ 方向的射线可以定义为：
$\lambda(\vec{p},\vec{v})=\{\vec{p}+t\vec{v} ,t>=0\}$

为了表示VO，还需要定义两个集合操作：
+ Minkowski sum: $A \bigoplus B = \{\vec{a}+\vec{b}|\vec{a}\in A, \vec{b}\in B\}$
+ reflection: $-A=\{-\vec{a}|\vec{a} \in A\}$

***** VO的表示
利用上面的工具，可以将障碍物B的VO表示为：
$VO_B{A}(\vec{v_B})=\{\vec{v_A}|\lambda(\vec{p_A},\vec{v_A}-\vec{v_B}) \bigcap (B \bigoplus -A) \ne \phi\}$

[[./figures/figure1inkuwata2014colregs.png]]
当相对速度矢量指向膨胀后的障碍物 $(B \bigoplus -A) \ne \phi$ 所形成的锥形区域外时，他们最终不会发生碰撞。

***** 其他
在实践中，重新规划的速度比船的轨迹变化的速度要快的多，因此速度为线性的假设也是合理的。
在作者的实现中，重规划的速率为1HZ，而船的角速度为小于30度每秒。

当涉及到多个船只时，简单的对VO进行叠加处理即可。
其计算的时间复杂度也是和危险船只的数量成正比的。

**** 碰撞时间
当相对速度处于VO中时，碰撞的时间 $\tau$ 为满足下式中最小的一个：
$\vec{p_A}+\tau(\vec{v_A}-\vec{v_B}) \in \vartheta(B \bigoplus -A)$

其中 $\bigoplus(.)$ 表示集合的边界。

**** 不确定性的处理
在处理移动障碍物的过程中存在多种不确定性,比如传感器的性能特性所拥有的对追踪船只的噪声和状态估计误差。
还有一种重要的不确定性是来自移动障碍物的运动本身。

由于VO方法假设了障碍物以恒定速度运动，但是这在实际情况中却是不现实的。
为了解决这个不确定性的影响，作者提出了最差情况下的速度障碍物法（WVO）：
$WVO_B^A(\vec_{v_B})=VO_B^A(\vec{v_B}) \bigoplus W_B$

[[./figures/figure2inkuwata2014colregs.png]]

其中 $W_B$ 为速度的不确定性所产生产生的集合: $\delta_B \in W_B$ 。
对于移动障碍物的速度，我们可以将其看成估计速度和速度的不确定性的和，
可以由下式表示： $\vec{v_B} = \overset{-}{\vec{v_B}} + \vec{\delta_B}$

在对速度障碍物的使用中，VO被认为是一个较强的约束，
而WVO作为提供安全缓冲区的部分，被当作是一个较弱的约束。
这两种约束的区别反应在后文所介绍的一个在约束影响力的系数因子。

**** 与海事规则的结合
使用VO和垂直于VO区域中心线的直线将速度空间划分为三等分。

[[./figures/figure3inkuwata2014colregs.png]]

其中 $V_3$ 为远离障碍物的速度方向。
$V_1$ 被看作是海事规则约束的禁行区（当无人艇超越障碍船只，
处于相遇场景，障碍船只在右边的方向和无人艇相交越）。

**** 算法
***** 碰撞的预先检测
算法的第一步是使用CPA方法计算碰撞发生的可能性，
并依次决定是否需要应用海事规则进行避障（各种情况的避障都包含在内?）。

对于移动障碍物通过下式来保证只有在短时间内很大可能发生碰撞的情况下，
才应用海事规则进行避障：
$0 \le t_{CPA} \le t_{\max}$ and $d_{CPA} \le d_{\min}$

***** 交通规则的选择
海事规则的选择可以通过分析无人艇和遭遇船只的几何约束来获得，
在本文中作者通过如下四个变量获得：heading, bearing, cross track, along track。

[[./figures/figure4inkuwata2014colregs.png]]

***** 迟滞的设定
因为状态感知中不确定性的存在，
如果在每个更新步骤都依照上面的步骤来获得，
无人艇可能会因为海事规则约束的忽开忽关而产生震荡的行为。

为了减轻这种路径上的震荡，并且使得无人艇符合海事规则的操作可以被其他船只所观察到，
我们在规则选入中引入了无人艇规则改变的频率。
需要注意的是最小的时间跨度应该比无人艇动力学的时间常数更大。

在实际中，对于每个船只设置一个独一无二的ID作为标识，并且对其维护记录一个海事规则的历史。
当初始时刻，无人艇满足某个特定的海事规则条件时，其进入那个海事规则的状态。
在某个状态中但当前时刻无人艇不满足海事规则的条件时，
其在历史记录对之前的 $n_h$ 步进行搜索，如果存在满足海事规则条件的设定，
那么当前步骤继续执行满足之前的海事规则的操作；
而当无人艇连续 $n_h$ 步不满足之前的规则时，该规则将被移除。
新规则如何设定？之前最多？当前的？
该参数也表示迟滞长度的设定，也就是无人艇在海事规则的情况下改变自己想法的最小频率。

值得注意的是在同一时间对于同一船只可以激活多个海事规则。

***** 代价的计算
通过构造速度和角度的空间，来寻找最优（碰撞时间长且和预期速度最接近的一条路径）的 $(v_i:\theta_i)$ 对。
其代价值的公式如下：
\[
J_{ij}=\frac{\omega_{\tau}}{\tau_{ij}}+
\omega_v {\lVert \vec{v_{ref}}-\genfrac{[}{]}{}{}{v_i \cos(\theta_j)}{v_j \sin(\theta_j)} \rVert}_Q
\]

其中 $\omega_{\tau}$ 表示碰撞时间的权重，
$\omega_{v}$ 表示偏离预期速度的权重，
$\vec{v_ref}$ 为达到下一个目标点的预期速度。

需要注意的是如果 $(v_i,\theta_j) \in WVO$ ，
并且 $(v_i, \theta_j) \notin VO$ ,那么碰撞时间的权重就会相应减少，
来表示对WVO上的约束的削弱。

问题：
为了遵循海事规则所inadmissable的点一定不能走？如果发生碰撞呢？

***** 算法的参数
依据仿真和实际海事测试时从船员那得到的反馈来调节算法的实际参数。

*** 实验结果
**** 实验设置
INS-获取船只的状态信息
JPL 摄像机系统-障碍物图，移动障碍物信息
Spatial Integrated Systems-世界地图

**** 实验中的一些有趣的细节
船只在被超越过程中的不精确的状态估计会引起无人艇的路径的轻微抖动。
比如在无人艇拐弯的过程中，船只第一次进入摄像机的视野，
当前的目标追踪器倾向于认为该船的朝向是指向无人艇的。

当crossing船只从摄像机的视野之外迫近无人艇时，
可能会导致无人艇不能做出安全的避障措施。

*** 结论
作者提出的算法首先识别基于VO的无人艇在移动障碍物的哪一边，
接着结合VO方法在VO空间中设置海事规则的约束，从而完成避障操作。

该算法对传统的VO进行了多个扩展，包括使用CPA方法进行碰撞的提前检测，
对于移动障碍物的不确定移动设置了安全缓冲区，
并设置了迟滞规则来保证每个与海事规则相关的操作能被其他船只所观测到。

* replanning
** Replanning with RRTs
*** 阅读时间
2017/04/02

*** 基本信息
https://www.clear.rice.edu/comp450/papers/drrt.pdf
被引用次数：188

*** 简要概述及评论
这篇文章介绍了一个能够完成replanning任务的DRRTs算法。
该算法通过对新发现为障碍物的区域相冲突的树的分支进行删除操作，
之后在剩下的树的基础上重新进行规划。

不过该算法存在两个缺陷：
+ 没有考虑机器人的运动学约束
+ 规划出的路径不是最优的
 
对于第一个缺陷作者已经提出了可以在全局树中嵌入考虑了运动学约束的局部生长树来解决。
*** 背景介绍 
RRTs能够有效地解决复杂构造环境中单次查询的路径规划问题，
但是每次传感器获得新的信息时都会将之前的信息丢弃，这样的做法非常的低效。

作者借鉴了D*算法的思想来对RRT算法进行了改进。
改进后的算法能够删除RRT中新失效的分支并保留其余部分,接着对剩余的RRT树进行生长直至搜索到答案。

*** The Extended RRT Algorithm
该算法在RRT的基础上对终点和之前计算点增加了偏差来提升运算效率。
#+BEGIN_SRC python
  def InitRRt():
      T.add(q_start)

  def GrowRRT():
      q_new = q_start
      while (Distance(q_new, q_goal) > distance_threshold):
         q_target = ChooseTarget() 
         q_nearest = NearestNeighbor(q_target)
         q_new = Extend(q_nearest, q_target)
         if q_new is not None:
             T.add(q_new)

  def ChooseTarget():
      p = RandomReal([0.0,1.0])
      i = RandomInt([1, num_waypoints])
      if p < goal_sampling_prob:  #bias to the goal
          return q_goal
      elif p < goal_sampling_prob + waypoing_prob:  #bias the growth to previously successful solutions
          return WaypointCache[i]                   #reuse information from previous planning episodes
      else:
          return RandomNode()
#+END_SRC

*** Dynamic RRT
#+BEGIN_SRC python
  def RegrowRRT():
      TrimRRT()
      GrowRRT()

  def TrimRRT():
      S = None
      i = 1
      while i < T.size():         #remove all nodes on the collision branch
          q_i = T.node(i)
          q_p = Parent(q_i)
          if q_p.flag == INVALID:
              q_i.flag = INVALID
          if q_i.flag != INVALID:
              S.add(q_i)
          i = i + 1
      T = CreateTreeFromNodes(S)

  def InvalidateNodes(obstacle):
      E = FindAffectedEdges(obstacle)
      for e in E:
          q_e = ChildEndpointNode(e)
          q_e.flag = INVALID

  def main():
      q_start = q_goal            #reverse the direction to reuse previous tree
      q_goal = q_robot
      InitRRT()
      GrowRRT()
      while q_goal != q_start:
          q_goal = Parent(q_goal)
          obstacles = CheckNewObstacles()
          contain_valid = False
          for ob in obstacles:
              contain_valid = contain_valid or InvalidateNodes(ob)
          if contain_valid:
              RegrowRRT()
#+END_SRC

*** 讨论
该种方法对于解决单个机器人的导航问题和多个机器人的受约束探索问题都是非常有效的。
因为像RRT这种随机的方法不会因为维度增长而使复杂性增加，所以对求解这类高维度问题会是非常有效的。

DRRTs算法有两大优势：
+ 易于实现并且仅涉及很少的变量。
+ 当树的边变得无效时，DRRTs算法仅仅删去受到影响的边。

为了使得规划出的路径能够满足船体的动力学特性，可以在全局的生长树中结合一个包含了船体动力学因素的局部生长树。
* 疑问
** 不能通过改变速度不能避开障碍
船只较多？都处于危险区域之中？
之后使用全局方法结合每个障碍物的最危险情况(CPA)重新规划路径。
